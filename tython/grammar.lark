start: stmts+

stmts: class_structure
     | interface
     | function
     | var
     | import_stmt
     | function_call terminator? -> function_call_expr

expr: types_repr
    | interface_shape
    | dotted_access
    | new_class
    | id
    | function_call

var: var_declarations id "=" ret_expr terminator
   | dotted_access "=" ret_expr terminator -> reassign

dotted_access: "this" ("." id)* -> this_dotted_access
             | access -> access
             | access ("." access)+

access: id

var_declarations: "let"
            | "var"
            | "const" // TODO: signify importance?

function: "function" id "(" func_args? ")" func_body
        | "async" "function" id "(" func_args? ")" func_body -> async_function

func_args: func_arg ("," func_arg)*

func_arg: implicit_or_typed

implicit_or_typed: id -> any_typed
                 | id ":" types -> explicit_type

func_body: "{" func_stmts+ "}"

func_stmts: stmts
          | "return" ret_expr ";" -> return_expr

ret_expr: expr
        | sum
        | function

function_call: dotted_access "(" call_args? ")"
             | "await" dotted_access "(" call_args? ")" -> async_await

call_args: call_arg ("," call_arg)*

call_arg: ret_expr

types: "any" -> any
     | "string" -> string
     | "boolean" -> boolean
     | "number" -> number
     | id -> object

?sum: product
    | sum "+" product -> add
    | sum "-" product -> min

?product: atom
        | product "*" atom -> mul
        | product "/" atom -> div

?atom: expr
     | id
     | "-" atom -> negative_types_repr
     | "(" sum ")"

types_repr: str
     // number 
     // boolean

interface: "interface" id interface_body

interface_body: "{" interface_declarations+ "}"

interface_declarations: interface_declaration ";"

interface_declaration: implicit_or_typed

interface_shape: "{" interface_shape_args? "}"

interface_shape_args: interface_shape_arg ("," interface_shape_arg)*

interface_shape_arg: id ":" expr

class_structure: "class" id class_body
               | "class" id "extends" id class_body -> inherited_class_structure

class_body: "{" class_declarations+ "}"

class_declarations: implicit_or_typed ";" -> field
                  | constructor_method
                  | method

method: id "(" func_args? ")" func_body
      | "async" id "(" func_args? ")" func_body -> async_method
      | ("@" function_call) method -> decorated_method

constructor_method: "constructor" "(" constructor_args? ")" func_body

constructor_args: constructor_arg ("," constructor_arg)*

constructor_arg: func_arg
               | "public" func_arg -> public_arg

new_class: "new" id "(" call_args? ")"

import_stmt: "import" "*" "as" id "from" str terminator -> import_reg
           | "import" "{" import_names "}" "from" str terminator -> import_from

import_names: import_name ("," import_name)*

import_name: id
           | id "as" id -> import_as_name

str: /(`.*?`)|(".*?")|(\'.*?\')/

terminator: ";"

id: /[a-zA-Z_][a-zA-Z0-9_]*/ -> identifier

%import common.WS
%ignore WS